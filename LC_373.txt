


# Find K Pairs with Smallest Sums . . .

** Brute Force **


    typedef pair<int,pair<int,int>>p;

    vector<vector<int>> kSmallestPairs(vector<int>& nums1, vector<int>& nums2, int k) {
        priority_queue<p,vector<p>>pq;
        int m=nums1.size();
        int n=nums2.size();

        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                int sum=nums1[i]+nums2[j];
                if(pq.size()<k) {
                    
                    pq.push({sum,{i,j}});
                } 

                else if(pq.top().first>sum){
                    pq.pop();
                    pq.push({sum,{i,j}});
                }

                else{
                    break;
                }
            }
        }

        vector<vector<int>>ans;

        while(!pq.empty()){
            auto temp=pq.top();
            pq.pop();
            int i=temp.second.first;
            int j=temp.second.second;
            ans.push_back({nums1[i],nums2[j]});
        }
        
        return ans;
    }


** Using 1 PQ **

       typedef pair<int,pair<int,int>>P;

    vector<vector<int>> kSmallestPairs(vector<int>& nums1, vector<int>& nums2, int k) {
         
        
        int m=nums1.size();
        int n=nums2.size();
        
        vector<vector<int>>ans;
        
        priority_queue<P,vector<P>,greater<P>>pq;
        
        set<pair<int,int>>s;
        int sum=nums1[0]+nums2[0];
        pq.push({sum,{0,0}});
        s.insert({0,0});
        
        while(k-- and !pq.empty()){
            
            auto temp=pq.top();
            pq.pop();
            int i=temp.second.first;
            int j=temp.second.second;
            
            ans.push_back({nums1[i],nums2[j]});
            
            if(j+1<n and s.find({i,j+1})==s.end()){
                pq.push({nums1[i]+nums2[j+1],{i,j+1}});
                s.insert({i,j+1});
            }
            
              if(i+1<m and s.find({i+1,j})==s.end()){
                pq.push({nums1[i+1]+nums2[j],{i+1,j}});
                s.insert({i+1,j});
            }
    }
        
     return ans;   
    }